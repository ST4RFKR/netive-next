// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(uuid())
  name        String
  email       String?      @unique
  phone       String?
  role        Role         @default(DRIVER)
  cards       NFCCard[]    @relation("UserCards")
  checkpoints Checkpoint[]
  vehicles    Vehicle[]    @relation("DriverVehicles")
  createdAt   DateTime     @default(now())
}

model NFCCard {
  id            String    @id @default(uuid())
  cardId        String    @unique
  type          CardType  @default(EMPLOYEE)
  userId        String? // Для карт сотрудников
  user          User?     @relation("UserCards", fields: [userId], references: [id])
  vehicleId     String? // Для карт транспорта
  vehicle       Vehicle?  @relation("VehicleCards", fields: [vehicleId], references: [id])
  isActive      Boolean   @default(true)
  issuedAt      DateTime  @default(now())
  deactivatedAt DateTime?
}

model Vehicle {
  id          String       @id @default(uuid())
  plate       String       @unique
  model       String?
  cards       NFCCard[]    @relation("VehicleCards")
  driver      User?        @relation("DriverVehicles", fields: [driverId], references: [id])
  driverId    String?
  checkpoints Checkpoint[]
  createdAt   DateTime     @default(now())
}

model Location {
  id          String       @id @default(uuid())
  name        String
  address     String?
  nfcTagId    String?      @unique
  coordinates String?
  checkpoints Checkpoint[]
}

model Checkpoint {
  id         String            @id @default(uuid())
  type       CheckpointType
  user       User?             @relation(fields: [userId], references: [id])
  userId     String?
  vehicle    Vehicle?          @relation(fields: [vehicleId], references: [id])
  vehicleId  String?
  location   Location          @relation(fields: [locationId], references: [id])
  locationId String
  timestamp  DateTime          @default(now())
  comment    String?
  isVerified Boolean           @default(false)
  gpsCoords  String?
  photos     CheckpointPhoto[]
}

model CheckpointPhoto {
  id           String     @id @default(uuid())
  url          String
  checkpoint   Checkpoint @relation(fields: [checkpointId], references: [id], onDelete: Cascade)
  checkpointId String
}

enum Role {
  ADMIN
  DISPATCHER
  DRIVER
  EMPLOYEE
  GUARD
}

enum CheckpointType {
  ENTER
  EXIT
}

enum CardType {
  EMPLOYEE
  VEHICLE
}
