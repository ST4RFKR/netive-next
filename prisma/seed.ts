import { PrismaClient, Role, CardType, CheckpointType } from "../app/generated/prisma"

const prisma = new PrismaClient()

async function main() {
  console.log("üå± –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

  // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
  await prisma.checkpointPhoto.deleteMany()
  await prisma.checkpoint.deleteMany()
  await prisma.nFCCard.deleteMany()
  await prisma.vehicle.deleteMany()
  await prisma.location.deleteMany()
  await prisma.user.deleteMany()

  // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const users = await Promise.all([
    prisma.user.create({
      data: {
        name: "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤",
        email: "ivan.petrov@company.com",
        phone: "+380501234567",
        role: Role.ADMIN,
      },
    }),
    prisma.user.create({
      data: {
        name: "–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞",
        email: "maria.sidorova@company.com",
        phone: "+380502345678",
        role: Role.DISPATCHER,
      },
    }),
    prisma.user.create({
      data: {
        name: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ò–≤–∞–Ω–æ–≤",
        email: "alex.ivanov@company.com",
        phone: "+380503456789",
        role: Role.DRIVER,
      },
    }),
    prisma.user.create({
      data: {
        name: "–ï–ª–µ–Ω–∞ –ö–æ–∑–ª–æ–≤–∞",
        email: "elena.kozlova@company.com",
        phone: "+380504567890",
        role: Role.EMPLOYEE,
      },
    }),
    prisma.user.create({
      data: {
        name: "–°–µ—Ä–≥–µ–π –ú–æ—Ä–æ–∑–æ–≤",
        email: "sergey.morozov@company.com",
        phone: "+380505678901",
        role: Role.GUARD,
      },
    }),
  ])

  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`)

  // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞
  const vehicles = await Promise.all([
    prisma.vehicle.create({
      data: {
        plate: "AA1234BB",
        model: "Mercedes Sprinter",
        driverId: users[2].id, // –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ò–≤–∞–Ω–æ–≤
      },
    }),
    prisma.vehicle.create({
      data: {
        plate: "CC5678DD",
        model: "Ford Transit",
        driverId: users[2].id,
      },
    }),
    prisma.vehicle.create({
      data: {
        plate: "EE9012FF",
        model: "Volkswagen Crafter",
      },
    }),
  ])

  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${vehicles.length} —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤`)

  // –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞—Ü–∏–∏
  const locations = await Promise.all([
    prisma.location.create({
      data: {
        name: "–ì–ª–∞–≤–Ω—ã–π –æ—Ñ–∏—Å",
        address: "—É–ª. –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è, 1, –ö–∏–µ–≤",
        nfcTagId: "NFC_OFFICE_001",
        coordinates: "50.4501,30.5234",
      },
    }),
    prisma.location.create({
      data: {
        name: "–°–∫–ª–∞–¥ ‚Ññ1",
        address: "—É–ª. –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è, 15, –ö–∏–µ–≤",
        nfcTagId: "NFC_WAREHOUSE_001",
        coordinates: "50.4601,30.5134",
      },
    }),
    prisma.location.create({
      data: {
        name: "–°–∫–ª–∞–¥ ‚Ññ2",
        address: "—É–ª. –õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è, 8, –ö–∏–µ–≤",
        nfcTagId: "NFC_WAREHOUSE_002",
        coordinates: "50.4401,30.5334",
      },
    }),
    prisma.location.create({
      data: {
        name: "–ü—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏",
        address: "—É–ª. –¢–æ—Ä–≥–æ–≤–∞—è, 22, –ö–∏–µ–≤",
        nfcTagId: "NFC_PICKUP_001",
        coordinates: "50.4301,30.5434",
      },
    }),
  ])

  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${locations.length} –ª–æ–∫–∞—Ü–∏–π`)

  // –°–æ–∑–¥–∞–µ–º NFC –∫–∞—Ä—Ç—ã –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
  const employeeCards = await Promise.all([
    prisma.nFCCard.create({
      data: {
        cardId: "EMP_001",
        type: CardType.EMPLOYEE,
        userId: users[0].id, // –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤
      },
    }),
    prisma.nFCCard.create({
      data: {
        cardId: "EMP_002",
        type: CardType.EMPLOYEE,
        userId: users[1].id, // –ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞
      },
    }),
    prisma.nFCCard.create({
      data: {
        cardId: "EMP_003",
        type: CardType.EMPLOYEE,
        userId: users[2].id, // –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ò–≤–∞–Ω–æ–≤
      },
    }),
    prisma.nFCCard.create({
      data: {
        cardId: "EMP_004",
        type: CardType.EMPLOYEE,
        userId: users[3].id, // –ï–ª–µ–Ω–∞ –ö–æ–∑–ª–æ–≤–∞
      },
    }),
  ])

  // –°–æ–∑–¥–∞–µ–º NFC –∫–∞—Ä—Ç—ã –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
  const vehicleCards = await Promise.all([
    prisma.nFCCard.create({
      data: {
        cardId: "VEH_001",
        type: CardType.VEHICLE,
        vehicleId: vehicles[0].id,
      },
    }),
    prisma.nFCCard.create({
      data: {
        cardId: "VEH_002",
        type: CardType.VEHICLE,
        vehicleId: vehicles[1].id,
      },
    }),
    prisma.nFCCard.create({
      data: {
        cardId: "VEH_003",
        type: CardType.VEHICLE,
        vehicleId: vehicles[2].id,
      },
    }),
  ])

  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${employeeCards.length + vehicleCards.length} NFC –∫–∞—Ä—Ç`)

  // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏
  const checkpoints = []

  // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
  for (let day = 6; day >= 0; day--) {
    const date = new Date()
    date.setDate(date.getDate() - day)

    // –£—Ç—Ä–µ–Ω–Ω–∏–µ –≤—ä–µ–∑–¥—ã
    for (let i = 0; i < 3; i++) {
      const morningTime = new Date(date)
      morningTime.setHours(8 + i, Math.floor(Math.random() * 60))

      const checkpoint = await prisma.checkpoint.create({
        data: {
          type: CheckpointType.ENTER,
          userId: users[Math.floor(Math.random() * users.length)].id,
          vehicleId: Math.random() > 0.3 ? vehicles[Math.floor(Math.random() * vehicles.length)].id : null,
          locationId: locations[Math.floor(Math.random() * locations.length)].id,
          timestamp: morningTime,
          comment: `–£—Ç—Ä–µ–Ω–Ω–∏–π –≤—ä–µ–∑–¥ ${morningTime.toLocaleDateString()}`,
          isVerified: Math.random() > 0.2,
          gpsCoords: `50.${4400 + Math.floor(Math.random() * 200)},30.${5200 + Math.floor(Math.random() * 300)}`,
        },
      })
      checkpoints.push(checkpoint)
    }

    // –í–µ—á–µ—Ä–Ω–∏–µ –≤—ã–µ–∑–¥—ã
    for (let i = 0; i < 3; i++) {
      const eveningTime = new Date(date)
      eveningTime.setHours(17 + i, Math.floor(Math.random() * 60))

      const checkpoint = await prisma.checkpoint.create({
        data: {
          type: CheckpointType.EXIT,
          userId: users[Math.floor(Math.random() * users.length)].id,
          vehicleId: Math.random() > 0.3 ? vehicles[Math.floor(Math.random() * vehicles.length)].id : null,
          locationId: locations[Math.floor(Math.random() * locations.length)].id,
          timestamp: eveningTime,
          comment: `–í–µ—á–µ—Ä–Ω–∏–π –≤—ã–µ–∑–¥ ${eveningTime.toLocaleDateString()}`,
          isVerified: Math.random() > 0.1,
          gpsCoords: `50.${4400 + Math.floor(Math.random() * 200)},30.${5200 + Math.floor(Math.random() * 300)}`,
        },
      })
      checkpoints.push(checkpoint)
    }
  }

  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${checkpoints.length} –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫`)

  // –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫
  const photos = []
  for (let i = 0; i < Math.min(10, checkpoints.length); i++) {
    const photo = await prisma.checkpointPhoto.create({
      data: {
        url: `https://example.com/photos/checkpoint_${checkpoints[i].id}.jpg`,
        checkpointId: checkpoints[i].id,
      },
    })
    photos.push(photo)
  }

  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${photos.length} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π`)

  console.log("üéâ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
  console.log(`
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${users.length}
- –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: ${vehicles.length}
- –õ–æ–∫–∞—Ü–∏–∏: ${locations.length}
- NFC –∫–∞—Ä—Ç—ã: ${employeeCards.length + vehicleCards.length}
- –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏: ${checkpoints.length}
- –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: ${photos.length}
  `)
}

main()
  .catch((e) => {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:", e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
